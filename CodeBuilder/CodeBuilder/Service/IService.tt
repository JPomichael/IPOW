<#@ template language="C#" debug="false" hostspecific="true"#>
<#@ include file="EF.Utility.CS.ttinclude"#><#@
 output extension=".cs"#><#
 //setting
string inputFile =  @"../../../infrastructure/iPow.Infrastructure.Data.DataSys/iPowSysModel.edmx";
//prefix + entityname + suffix
//AdminUser+Dto
//����һ�㲻Ҫ��ǰ׺
var prefix = "I";  //前缀
//Dto��֤���Dto��֤���ļ��ĺ�׺
var suffix = "Service";  //后缀

var namepase = "iPow.Infrastructure.Data.DataSys."; //
//Dto��ĺ�׺
var dtoEntitySuffix = "Service";
var dtoEitityNameSpace = "iPow.Domain.Dto";

//不需要的表名在以下列出
var notInList = new List<string>();
notInList.Add("VideoClass");
notInList.Add("VideoInfoClass");
notInList.Add("VideoComm");
notInList.Add("VideoTag");
notInList.Add("VideoInfo");
notInList.Add("VideoPic");

notInList.Add("LinkInfo");
notInList.Add("LinkPic");
notInList.Add("LinkClass");

notInList.Add("Activity");
notInList.Add("ActivityClass");
notInList.Add("ActivityPic");

notInList.Add("Discount");
notInList.Add("DiscountPic");
notInList.Add("DiscountClass");

notInList.Add("HolidayPic");
notInList.Add("HolidayClass");
notInList.Add("Holiday");

//end setting

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();
EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);
// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
WriteCustomObservableCollection();
EndNamespace(namespaceName);
// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	if(notInList.Contains(entity.Name))
	{
		continue;
	}
    var name = "";
    var cutname = code.Escape(entity).Substring(0, 4);
    if (cutname.ToLower() == "bbs_" || cutname.ToLower() == "sys_")
    {
	   name = code.Escape(entity).Substring(4);
  }
    else if (cutname.ToLower() == "surv")
    {
	   name = code.Escape(entity).Substring(7);
  }
    else
    {
	   name = code.Escape(entity);
  }
    fileManager.StartNewFile(prefix + name + dtoEntitySuffix + ".cs"); //文件名
    BeginNamespace(namespaceName, code);
    bool entityHasNullableFKs = entity.NavigationProperties.Any(np => np.GetDependentProperties().Any(p=>ef.IsNullable(p)));

	#>
<#=Accessibility.ForType(entity)#> interface <#= prefix + name  + dtoEntitySuffix#>
{

	    bool Add(<#=  namepase + code.Escape(entity) #>  entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool Add(IList<<#= namepase + code.Escape(entity)#>> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool Delete(<#= namepase + code.Escape(entity) #> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool Delete(IList<<#=namepase + code.Escape(entity)#>> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool Delete(IList<int> idList, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool DeleteTrue(<#= namepase + code.Escape(entity) #> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool DeleteTrue(IList<<#=  namepase + code.Escape(entity)#>> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool DeleteTrue(IList<int> idList, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool Modify(<#=namepase + code.Escape(entity) #> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);

        bool Modify(IList<<#=namepase + code.Escape(entity) #>> entity, iPow.Infrastructure.Data.DataSys.Sys_AdminUser operUser);
	<#
	var type = "";
	var obj = entity.KeyMembers[0].TypeUsage;
    if (Convert.ToString(obj) == "Edm.Int32")
    {
	   type = "int";
  }
    else
    { type = "string"; }
#>
        <#=namepase + code.Escape(entity) #> Get(<#= type #> id);

        IQueryable<<#=namepase + code.Escape(entity)  #>> GetList();

        int GetMaxId();

}
<#
    EndNamespace(namespaceName);
}

if (!VerifyTypesAreCaseInsensitiveUnique(ItemCollection))
{
    return "";
}

fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}

void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>

<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }
        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }
    }
    return true;
}
#>
